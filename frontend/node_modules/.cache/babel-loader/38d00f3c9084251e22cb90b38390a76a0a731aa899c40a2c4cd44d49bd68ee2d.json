{"ast":null,"code":"const BASE_URL = 'http://localhost:8080';\nexport const GetAllEmployees = async (search = '', page = 1, limit = 5) => {\n  const url = `${BASE_URL}/api/employees?search=${search}&page=${page}&limit=${limit}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const {\n      data\n    } = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c = GetAllEmployees;\nexport const GetEmployeeDetailsById = async id => {\n  const url = `${BASE_URL}/api/employees/${id}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const {\n      data\n    } = await result.json();\n    console.log(data);\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c2 = GetEmployeeDetailsById;\nexport const DeleteEmployeeById = async id => {\n  const url = `${BASE_URL}/api/employees/${id}`;\n  const options = {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    console.log(data);\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c3 = DeleteEmployeeById;\nexport const CreateEmployee = async empObj => {\n  const url = `${BASE_URL}/api/employees`;\n  console.log('url ', url);\n  // Create a FormData object\n  const formData = new FormData();\n\n  // Append all fields to the FormData object\n  for (const key in empObj) {\n    formData.append(key, empObj[key]);\n  }\n  // FormData handles the headers and content type\n  const options = {\n    method: 'POST',\n    body: formData\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c4 = CreateEmployee;\nexport const UpdateEmployeeById = async (empObj, id) => {\n  const url = `${BASE_URL}/api/employees/${id}`;\n  console.log('url ', url);\n  // Create a FormData object\n  const formData = new FormData();\n\n  // Append all fields to the FormData object\n  for (const key in empObj) {\n    formData.append(key, empObj[key]);\n  }\n  // FormData handles the headers and content type\n  const options = {\n    method: 'PUT',\n    body: formData\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    console.log('<---update--> ', data);\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c5 = UpdateEmployeeById;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"GetAllEmployees\");\n$RefreshReg$(_c2, \"GetEmployeeDetailsById\");\n$RefreshReg$(_c3, \"DeleteEmployeeById\");\n$RefreshReg$(_c4, \"CreateEmployee\");\n$RefreshReg$(_c5, \"UpdateEmployeeById\");","map":{"version":3,"names":["BASE_URL","GetAllEmployees","search","page","limit","url","options","method","headers","result","fetch","data","json","err","_c","GetEmployeeDetailsById","id","console","log","_c2","DeleteEmployeeById","_c3","CreateEmployee","empObj","formData","FormData","key","append","body","_c4","UpdateEmployeeById","_c5","$RefreshReg$"],"sources":["H:/employee/frontend/src/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080';\r\n\r\nexport const GetAllEmployees = async (search = '', page = 1, limit = 5) => {\r\n    const url =\r\n        `${BASE_URL}/api/employees?search=${search}&page=${page}&limit=${limit}`;\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    try {\r\n        const result = await fetch(url, options);\r\n        const { data } = await result.json();\r\n\r\n        return data;\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n}\r\n\r\nexport const GetEmployeeDetailsById = async (id) => {\r\n    const url =\r\n        `${BASE_URL}/api/employees/${id}`;\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    try {\r\n        const result = await fetch(url, options);\r\n        const { data } = await result.json();\r\n        console.log(data);\r\n        return data;\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n}\r\n\r\nexport const DeleteEmployeeById = async (id) => {\r\n    const url =\r\n        `${BASE_URL}/api/employees/${id}`;\r\n    const options = {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    try {\r\n        const result = await fetch(url, options);\r\n        const data = await result.json();\r\n        console.log(data);\r\n        return data;\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n}\r\n\r\n\r\nexport const CreateEmployee = async (empObj) => {\r\n    const url = `${BASE_URL}/api/employees`;\r\n    console.log('url ', url);\r\n    // Create a FormData object\r\n    const formData = new FormData();\r\n\r\n    // Append all fields to the FormData object\r\n    for (const key in empObj) {\r\n        formData.append(key, empObj[key]);\r\n    }\r\n    // FormData handles the headers and content type\r\n    const options = {\r\n        method: 'POST',\r\n        body: formData\r\n    };\r\n    try {\r\n        const result = await fetch(url, options);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const UpdateEmployeeById = async (empObj, id) => {\r\n    const url = `${BASE_URL}/api/employees/${id}`;\r\n    console.log('url ', url);\r\n    // Create a FormData object\r\n    const formData = new FormData();\r\n\r\n    // Append all fields to the FormData object\r\n    for (const key in empObj) {\r\n        formData.append(key, empObj[key]);\r\n    }\r\n    // FormData handles the headers and content type\r\n    const options = {\r\n        method: 'PUT',\r\n        body: formData\r\n    };\r\n    try {\r\n        const result = await fetch(url, options);\r\n        const data = await result.json();\r\n        console.log('<---update--> ', data);\r\n        return data;\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}